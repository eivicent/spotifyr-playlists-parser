---
title: "Daily Listening Dashboard"
format: 
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    code-fold: true
    code-tools: true
execute:
  echo: false
  warning: false
  message: false
---

```{r setup}
#| message: false
#| warning: false

# Load required libraries
library(tidyverse)
library(lubridate)
library(gt)
library(patchwork)
library(here)
library(shiny)
library(bslib)
```

## Data Processing

```{r load-data}
#| message: false
#| warning: false

# Get list of all daily CSV files
daily_files <- list.files(here("data", "daily"), pattern = "\\.csv$", full.names = TRUE)

# Function to read and process a single daily file
read_daily_file <- function(file_path) {
  if (file.exists(file_path)) {
    # Read the CSV file
    daily_data <- read.csv(file_path, sep = ";", stringsAsFactors = FALSE)
    
    # Extract date from filename
    date_str <- basename(file_path) %>% 
      str_remove("\\.csv$")
    
    # Count songs for this day
    song_count <- nrow(daily_data)
    
    # Return summary
    data.frame(
      date = as.Date(date_str),
      songs = song_count,
      file = basename(file_path)
    )
  } else {
    return(NULL)
  }
}

# Process all daily files
daily_summary <- map_dfr(daily_files, read_daily_file) %>%
  arrange(date) %>%
  filter(!is.na(date))

# Create value boxes for key statistics
total_days <- nrow(daily_summary)
total_songs <- sum(daily_summary$songs)
avg_songs <- round(mean(daily_summary$songs), 1)
date_range <- paste(min(daily_summary$date), "to", max(daily_summary$date))

# Display value boxes
value_box(
  title = "Total Days",
  value = total_days,
  showcase = "ðŸ“…",
  theme = "success"
)

value_box(
  title = "Total Songs",
  value = scales::comma(total_songs),
  showcase = "ðŸŽµ",
  theme = "primary"
)

value_box(
  title = "Avg Songs/Day",
  value = avg_songs,
  showcase = "ðŸ“Š",
  theme = "info"
)

value_box(
  title = "Date Range",
  value = date_range,
  showcase = "ðŸ“†",
  theme = "secondary"
)
```

## Daily Song Count Visualization

```{r daily-plot}
#| fig-width: 12
#| fig-height: 6

# Create the main plot with improved date formatting
p <- daily_summary %>%
  ggplot(aes(x = date, y = songs)) +
  geom_line(color = "#1DB954", size = 1) +
  geom_point(color = "#1DB954", size = 1.5, alpha = 0.7) +
  geom_smooth(method = "loess", color = "#FF6B6B", size = 1, se = TRUE, alpha = 0.3) +
  labs(
    title = "Daily Songs Listened",
    subtitle = paste("From", min(daily_summary$date), "to", max(daily_summary$date)),
    x = "Date",
    y = "Number of Songs",
    caption = "Data from Spotify listening history"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray60"),
    axis.title = element_text(size = 12),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank()
  ) +
  scale_x_date(
    date_labels = "%b %Y", 
    date_breaks = "2 months",
    date_minor_breaks = "1 month"
  ) +
  scale_y_continuous(breaks = scales::pretty_breaks(n = 8))

# Display the plot
p
```

## Monthly Summary

```{r monthly-summary}
#| message: false

# Create monthly summary
monthly_summary <- daily_summary %>%
  mutate(
    year_month = floor_date(date, "month")
  ) %>%
  group_by(year_month) %>%
  summarise(
    total_songs = sum(songs),
    days_listened = n(),
    avg_songs_per_day = round(mean(songs), 2),
    .groups = "drop"
  ) %>%
  arrange(year_month)

# Create monthly trend plot
monthly_plot <- monthly_summary %>%
  ggplot(aes(x = year_month, y = total_songs)) +
  geom_line(color = "#1DB954", size = 1.2) +
  geom_point(color = "#1DB954", size = 2) +
  geom_smooth(method = "loess", color = "#FF6B6B", size = 1, se = TRUE, alpha = 0.3) +
  labs(
    title = "Monthly Song Count Trend",
    x = "Month",
    y = "Total Songs",
    caption = "Monthly totals with trend line"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  scale_x_date(
    date_labels = "%b %Y", 
    date_breaks = "3 months",
    date_minor_breaks = "1 month"
  )

print(monthly_plot)

# Display monthly summary table
monthly_summary %>%
  mutate(
    year_month = format(year_month, "%Y-%m")
  ) %>%
  gt() %>%
  tab_header(
    title = "Monthly Listening Summary",
    subtitle = "Total songs, days listened, and average per day by month"
  ) %>%
  cols_label(
    year_month = "Month",
    total_songs = "Total Songs",
    days_listened = "Days Listened",
    avg_songs_per_day = "Avg Songs/Day"
  ) %>%
  fmt_number(
    columns = c(total_songs, avg_songs_per_day),
    decimals = 0
  ) %>%
  fmt_number(
    columns = days_listened,
    decimals = 0
  ) %>%
  data_color(
    columns = total_songs,
    colors = scales::col_numeric(
      palette = c("#FFE5E5", "#FF6B6B"),
      domain = NULL
    )
  ) %>%
  opt_interactive(use_search = TRUE, use_filters = TRUE)
```

## Weekly Patterns

```{r weekly-patterns}
#| fig-width: 12
#| fig-height: 8

# Analyze weekly patterns (starting on Monday)
weekly_patterns <- daily_summary %>%
  mutate(
    weekday = wday(date, label = TRUE, abbr = FALSE, week_start = 1),
    week_num = week(date)
  ) %>%
  group_by(weekday) %>%
  summarise(
    avg_songs = mean(songs),
    median_songs = median(songs),
    .groups = "drop"
  ) %>%
  # Reorder to start with Monday
  mutate(weekday = factor(weekday, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")))

# Create weekday plot (Monday start)
p1 <- weekly_patterns %>%
  ggplot(aes(x = weekday, y = avg_songs)) +
  geom_col(fill = "#1DB954", alpha = 0.8) +
  geom_text(aes(label = round(avg_songs, 1)), vjust = -0.5, size = 3) +
  labs(
    title = "Average Songs by Day of Week",
    x = "Day of Week",
    y = "Average Number of Songs",
    caption = "Based on all available data (Monday start)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Create distribution plot
p2 <- daily_summary %>%
  ggplot(aes(x = songs)) +
  geom_histogram(bins = 30, fill = "#1DB954", alpha = 0.7, color = "white") +
  geom_vline(aes(xintercept = mean(songs)), color = "#FF6B6B", linetype = "dashed", size = 1) +
  labs(
    title = "Distribution of Daily Song Counts",
    x = "Number of Songs",
    y = "Frequency",
    caption = paste("Mean:", round(mean(daily_summary$songs), 1), "songs per day")
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold")
  )

# Combine plots
library(patchwork)
p1 + p2
```

## Recent Activity

```{r recent-activity}
#| message: false

# Show last 30 days of activity
recent_activity <- daily_summary %>%
  arrange(desc(date)) %>%
  head(30) %>%
  arrange(date)

recent_activity %>%
  mutate(
    date = format(date, "%Y-%m-%d")
  ) %>%
  gt() %>%
  tab_header(
    title = "Recent Listening Activity",
    subtitle = "Last 30 days of listening data"
  ) %>%
  cols_label(
    date = "Date",
    songs = "Songs"
  ) %>%
  fmt_number(
    columns = songs,
    decimals = 0
  ) %>%
  data_color(
    columns = songs,
    colors = scales::col_numeric(
      palette = c("#E5F3FF", "#1DB954"),
      domain = NULL
    )
  ) %>%
  opt_interactive(use_search = TRUE, use_filters = TRUE)
```

## Summary Statistics

```{r summary-stats}
#| message: false

# Calculate comprehensive statistics
stats <- daily_summary %>%
  summarise(
    `Total Days` = n(),
    `Total Songs` = sum(songs),
    `Average per Day` = round(mean(songs), 2),
    `Median per Day` = median(songs),
    `Max in One Day` = max(songs),
    `Min in One Day` = min(songs),
    `Standard Deviation` = round(sd(songs), 2),
    `Date Range (Days)` = as.numeric(max(date) - min(date)) + 1
  ) %>%
  pivot_longer(everything(), names_to = "Metric", values_to = "Value")

# Display statistics
stats %>%
  gt() %>%
  tab_header(
    title = "Listening Statistics Summary",
    subtitle = "Comprehensive overview of your listening habits"
  ) %>%
  cols_label(
    Metric = "Metric",
    Value = "Value"
  ) %>%
  fmt_number(
    columns = Value,
    decimals = 2
  ) %>%
  data_color(
    columns = Value,
    colors = scales::col_numeric(
      palette = c("#F0F8FF", "#4A90E2"),
      domain = NULL
    )
  ) %>%
  opt_interactive(use_search = TRUE)
```

---

*Last updated on `r Sys.Date()`*
